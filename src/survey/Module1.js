import React, { useEffect, useState } from 'react'
import './Module1.css';
import SurveyOptions from './SurveyOptions';
import Summary from './Summary';

const Module1 = () => {
    const [surveyData, setSurveyData] = useState();
    const [selectedCategoryIndex, setSelectedCategoryIndex] = useState(0);
    const [selectedCategory, setSelectedCategory] = useState("");
    const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
    const [questions, setQuestions] = useState([]);
    const [currentQuestion, setCurrentQuestion] = useState();
    const [showSummary, setShowSummary] = useState(false);
    const [showSurveyResults, setShowSurveyResults] = useState(false);

    useEffect(() => {
        let data = {
            "categories": [
                {
                    "category": "Building and facilities",
                    "questions": [
                        {
                            "heading": "Energy systems optimisation",
                            "subHeading": "Choose what applies best for your company",
                            "options": [
                                "All energy systems for heating, cooling, lighting and ventilating are controlled manually",
                                "Energy systems are automatically controlled through basic timers to reduce consumption",
                                "Energy systems are automatically controlled through advanced sensors to limit consumption to be when needed only",
                                "Energy systems are controlled and monitored through advanced technologies for real time energy management and analysis",
                                "Don't know",
                                "Not applicable"
                            ],
                        },
                        {
                            "heading": "Energy supplier",
                            "subHeading": "Choose what applies best for your company",
                            "options": [
                                "Energy supplier is exclusively fossil-based (e.g. coal, oil, natural gas)",
                                "Energy supplier has little fraction of its energy mix from renewable sources but without a Renewable Electricity Guaranteed Origin (REGO) certificate",
                                "Energy supplier has considerable proportion of its energy mix from renewable sources but without a Renewable Electricity Guaranteed Origin (REGO) certificate",
                                "Switch to energy supplier with considerably high proportion of renewable sources with a Renewable Electricity Guaranteed Origin (REGO) certificate and fuel mix disclosure obligations",
                                "Don't know",
                                "Not applicable"
                            ]
                        }

                    ]
                },
                {
                    "category": "Power",
                    "questions": [
                        {
                            "heading": "Power purchase agreement (PPA)",
                            "subHeading": "Choose what applies best for your company",
                            "options": [
                                "No PPA with low-carbon suppliers in place (A power purchase agreement (PPA) is a contractual agreement between energy buyers and sellers. They come together and agree to buy and sell an amount of energy which is or will be generated by a renewable asset. PPAs are usually signed for a long-term period between 10-20 years)",
                                "PPA with low-carbon suppliers concept is understood but not explored yet",
                                "PPA low-carbon suppliers concept is understood and being explored",
                                "PPA low-carbon suppliers concept is understood and in place",
                                "Don't know",
                                "Not applicable"
                            ]
                        },
                        {
                            "heading": "Renewable energy integration",
                            "subHeading": "Choose what applies best for your company",
                            "options": [
                                "Zero on-site renewable energy generation",
                                "Minimal level of on-site renewable energy generation to meet basic electricity needs",
                                "Considerable level of on-site renewable energy generation (e.g. installation of solar panel and ground source heat pumps to meet electricty and heating needs)",
                                "Fully integrated on-site renewable generation incorporating combined heat and power (CHP), battery storage and energy recovery systems",
                                "Don't know",
                                "Not applicable"
                            ]
                        }

                    ]
                }
            ]
        }
        setSurveyData(data);
        setSelectedCategoryIndex(0);
        setSelectedCategory(data.categories[0].category);
        setQuestions(prev => {
            let ques = data?.categories[selectedCategoryIndex]?.questions;
            setCurrentQuestion(ques[0]);
            return ques;
        });
        setCurrentQuestionIndex(0);
    }, []);

    const onPrevClick = () => {
        if (currentQuestionIndex == 0 && selectedCategoryIndex != 0) {
            setSelectedCategoryIndex(prev => {
                let categoryIndex = prev - 1;
                setSelectedCategory(surveyData?.categories[categoryIndex]?.category);
                setQuestions(prev1 => {
                    let ques = surveyData?.categories[categoryIndex]?.questions;
                    setCurrentQuestionIndex(ques.length - 1);
                    setCurrentQuestion(ques[ques.length - 1]);
                    return ques;
                })
                return categoryIndex;
            })
        } else {
            setCurrentQuestionIndex(prev => {
                let index = prev - 1;
                setCurrentQuestion(prev => questions[index]);
                return index;
            })
        }
    }

    const onNextCategory = () => {
        setShowSummary(false);
        if (selectedCategoryIndex != surveyData.categories.length - 1) {
            setSelectedCategoryIndex(prev => {
                let categoryIndex = prev + 1;
                setSelectedCategory(surveyData?.categories[prev + 1]?.category);
                setQuestions(prev1 => {
                    let ques = surveyData?.categories[categoryIndex]?.questions;
                    setCurrentQuestionIndex(0);
                    setCurrentQuestion(ques[0]);
                    return ques;
                })
                return categoryIndex;
            })
        }
    }
    const onNextClick = () => {
        if (currentQuestionIndex == questions.length - 1) {
            if (selectedCategoryIndex == surveyData.categories.length - 1) {
                setShowSurveyResults(true);
            }
            setShowSummary(true);
        } else {
            setCurrentQuestionIndex(prev => {
                let index = prev + 1;
                setCurrentQuestion(prev => questions[index]);
                return index;
            })
        }
    }
    const onOptionSelected = (param) => (event) => {
        setCurrentQuestion(prev => {
            let prevData = prev;
            prevData['selectedOption'] = param;
            return { ...prevData };
        })
            setTimeout(() => {
                onNextClick();
            }, 500)
    }
    const onSummaryOptionSelected = (index, option) => {
        setQuestions(prev => {
            let ques = prev;
            ques[index].selectedOption = option;
            return [...ques];
        })
    }

    return <div className='survey-parent-div'>
        <div> <h6 className='survey-heading-1'>CATEGORY {selectedCategoryIndex + 1}/{surveyData?.categories?.length}</h6>
            <div className='survey-div-Class-1'>
                <h2 className='survey-heading-2'>{selectedCategory}</h2>
                <p className='survey-para-1'>{showSummary ? 'Summary' : `${currentQuestionIndex + 1}/${questions?.length}`}</p>
            </div>
            <div className='survey-hr-div'>
                {surveyData?.categories?.length ? surveyData?.categories.map((ele, index) => {
                    return <hr className={`survey-hr ${selectedCategoryIndex == index ? 'selected-cat' : ''}`}></hr>
                }) : null}
            </div>
            <>
                <h3 className='survey-heading-3'>{showSummary ? `Here's a summary of what you chose for ${selectedCategory} (category ${selectedCategoryIndex + 1}/${surveyData?.categories?.length})` : currentQuestion?.heading}</h3>
                <p className='survey-para-2'>{showSummary ? 'Click on the button "Change" if you want to change what you chose' : currentQuestion?.subHeading}</p>
            </>
        </div>
        <>
            {showSummary ? <Summary onSummaryOptionSelected={onSummaryOptionSelected} questions={questions} onNextCategory={onNextCategory} showSurveyResults={showSurveyResults}/> : <div className='survey-ques-div'>
                <div>
                    <div className='survey-questions-options'>
                        {currentQuestion?.options?.length ? currentQuestion?.options.map((ele, index) => {
                            return <SurveyOptions option={ele} isSelected={currentQuestion.selectedOption == index} onOptionSelected={onOptionSelected(index)} optionIndex={index} />
                        }) : null}
                    </div>
                </div>
                <div className='btn-nav-div'>
                    <button disabled={currentQuestionIndex == 0 && selectedCategoryIndex == 0} className='btn-nav' onClick={onPrevClick}>Previous</button>
                    {/* <button disabled={currentQuestionIndex == questions.length - 1 && selectedCategoryIndex == surveyData.categories.length -1} className={`btn-nav`} onClick={onNextClick}>Next</button> */}
                </div>
            </div>
            }
        </>

    </div>

}

export default Module1;